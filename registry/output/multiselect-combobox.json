{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multiselect-combobox",
  "type": "registry:component",
  "description": "",
  "registryDependencies": [
    "button",
    "popover",
    "command",
    "badge"
  ],
  "files": [
    {
      "path": "registry/default/components/multiselect-combobox.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Check, ChevronsUpDown, X } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface Option {\n  label: string;\n  value: string;\n}\n\ninterface MultiSelectProps {\n  options: Option[];\n  selected: string[];\n  onChange: (selected: string[]) => void;\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport function MultiSelect({\n  options,\n  selected,\n  onChange,\n  placeholder = \"Select items...\",\n  className,\n  disabled = false,\n}: MultiSelectProps) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleUnselect = (item: string) => {\n    onChange(selected.filter((i) => i !== item));\n  };\n\n  const handleSelect = (item: string) => {\n    if (selected.includes(item)) {\n      handleUnselect(item);\n    } else {\n      onChange([...selected, item]);\n    }\n  };\n\n  const selectedOptions = options.filter((option) =>\n    selected.includes(option.value),\n  );\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\n            \"h-auto max-h-32 min-h-10 w-full justify-between\",\n            className,\n          )}\n          disabled={disabled}\n        >\n          <div className=\"flex max-h-24 w-full flex-wrap gap-1 space-y-2 overflow-y-auto\">\n            {selectedOptions.length > 0 ? (\n              selectedOptions.map((option) => (\n                <Badge\n                  variant=\"secondary\"\n                  key={option.value}\n                  className=\"mr-1 mb-0 flex-shrink-0\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    handleUnselect(option.value);\n                  }}\n                >\n                  {option.label}\n                  <button\n                    className=\"ml-1 rounded-full ring-offset-background outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") {\n                        handleUnselect(option.value);\n                      }\n                    }}\n                    onMouseDown={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleUnselect(option.value);\n                    }}\n                  >\n                    <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                  </button>\n                </Badge>\n              ))\n            ) : (\n              <span className=\"text-muted-foreground\">{placeholder}</span>\n            )}\n          </div>\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        className=\"max-h-[300px] p-0\"\n        align=\"start\"\n        style={{ width: \"var(--radix-popover-trigger-width)\" }}\n      >\n        <Command className=\"w-full\">\n          <CommandInput placeholder=\"Search...\" />\n          <CommandList className=\"max-h-[200px] overflow-y-auto\">\n            <CommandEmpty>No item found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => (\n                <CommandItem\n                  key={option.value}\n                  value={option.value}\n                  onSelect={() => handleSelect(option.value)}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      selected.includes(option.value)\n                        ? \"opacity-100\"\n                        : \"opacity-0\",\n                    )}\n                  />\n                  {option.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/multiselect-combobox.tsx"
    }
  ]
}